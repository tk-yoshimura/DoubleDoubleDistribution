using DoubleDouble;
using DoubleDoubleStatistic;
using DoubleDoubleStatistic.Utils;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace DoubleDoubleStatisticTest.ScalableDistribution {
    [TestClass()]
    public class FoledNormalDistributionTests {
        readonly FoledNormalDistribution dist1 = new();
        readonly FoledNormalDistribution dist2 = new(mu: 1, sigma: 3);
        readonly FoledNormalDistribution dist3 = new(mu: 2, sigma: 3);
        readonly FoledNormalDistribution dist4 = new(mu: 4, sigma: 2);
        readonly FoledNormalDistribution dist5 = new(mu: 8, sigma: 3);
        readonly FoledNormalDistribution dist6 = new(mu: 16, sigma: 3);
        readonly FoledNormalDistribution dist7 = new(mu: 24, sigma: 3);
        readonly FoledNormalDistribution dist8 = new(mu: 32, sigma: 3);
        readonly FoledNormalDistribution dist9 = new(mu: 64, sigma: 3);
        readonly FoledNormalDistribution dist10 = new(mu: 96, sigma: 3);
        readonly FoledNormalDistribution dist11 = new(mu: 128, sigma: 3);

        FoledNormalDistribution[] Dists => [
            dist1,
            dist2,
            dist3,
            dist4,
            dist5,
            dist6,
            dist7,
            dist8,
            dist9,
            dist10,
            dist11,
        ];

        [TestMethod()]
        public void InfoTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);
                Console.WriteLine($"Support={dist.Support}");
                Console.WriteLine($"Mu={dist.Mu}");
                Console.WriteLine($"Sigma={dist.Sigma}");
                Console.WriteLine($"Mean={dist.Mean}");
                Console.WriteLine($"Median={dist.Median}");
                Console.WriteLine($"Mode={dist.Mode}");
                Console.WriteLine($"Variance={dist.Variance}");
                Console.WriteLine($"Skewness={dist.Skewness}");
                Console.WriteLine($"Kurtosis={dist.Kurtosis}");
                Console.WriteLine($"Entropy={dist.Entropy}");
                Console.WriteLine(dist.Formula);
            }
        }

        [TestMethod()]
        public void MeanTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                if (ddouble.IsNaN(dist.Mean)) {
                    continue;
                }

                ddouble actual = dist.Mean;
                ddouble expected = IntegrationStatistics.Mean(dist, eps: 1e-28, discontinue_eval_points: 65536);
                Assert.IsTrue(ddouble.Abs(actual - expected) < 1e-28, $"{dist}\n{expected}\n{actual}");
            }
        }

        [TestMethod()]
        public void ModeTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                if (ddouble.IsNaN(dist.Mode)) {
                    continue;
                }

                Assert.IsTrue(dist.PDF(dist.Mode) > dist.PDF(dist.Mode - 1e-4), $"{dist}\n{dist.Mode}");
                Assert.IsTrue(dist.PDF(dist.Mode) > dist.PDF(dist.Mode + 1e-4), $"{dist}\n{dist.Mode}");
            }

            ddouble[] expecteds = [
                0,
                "3.0360610584574501087636728778368842796072e-1",
                "4.2585574585765289018669051543506133958470e-1",
                "5.1743330585260713353646247299508280619159e-1",
                "5.9289312793016791024181135620834404552998e-1",
                "6.5794234916627289517452345497096260979847e-1",
                "7.1554353213382590812415599582276861512520e-1",
                "7.6747769130529323473412042056714134467415e-1",
                "8.1491886920918127165167809476771650977240e-1",
                "8.5869181756175774552664119015366035112632e-1",
                "8.9940356902417202892073634399428122214345e-1",
                "9.3751712356538587942384389522553346314411e-1",
                "9.7339569141419347919645388065513182079457e-1",
                "1.0073307453010081258016866625078053195782e0",
                "1.0395606052696985151221493947264713140191e0",
                "1.0702832047337098460873174359093616520966e0",
                "1.0996651296504003567592042039683099805238e0",
                "1.1278481861867609168216964931395858428883e0",
                "1.1549542799330962499754787998373537463913e0",
                "1.1810891115719848187274857693108585127275e0",
                "1.2063450240664397936229739568516986142002e0",
                "1.2308032294014332085664910847291340433528e0",
                "1.2545355735726747958087715605595413089284e0",
                "1.2776059524779709289802023806256911834717e0",
                "1.3000714601223234643787843797033889238287e0",
                "1.3219833289227077158065347396864807085562e0",
                "1.3433877066624052340780886721128714038693e0",
                "1.3643263037354529399838753189414168126720e0",
                "1.3848369363945421004624402303131320503554e0",
                "1.4049539858770822514651574730279126058361e0",
                "1.4247087889300762996877634057223513118141e0",
                "1.4441299719699895843930051814283235303790e0",
                "1.4632437386096904548728804835695353600060e0",
                "1.4820741183564128858585121685579835161417e0",
                "1.5006431827863017390403267327259987644016e0",
                "1.5189712343265771811592647108300712698487e0",
                "1.5370769718482111272823162753794795585773e0",
                "1.5549776365329551216277202592905123303916e0",
                "1.5726891408858318761873845509423339152449e0",
                "1.5902261832855947869988905435467445158276e0",
                "1.6076023500767109409706742746979150189898e0",
                "1.6248302068884098248837636752678731008186e0",
                "1.6419213806048231830185719129700292477362e0",
                "1.6588866331940083660085573373783256230731e0",
                "1.6757359284239328446943259825654060194972e0",
                "1.6924784923434065127053452150427542960945e0",
                "1.7091228682800251432525534093011462711123e0",
                "1.7256769670010911994624022252281458600405e0",
                "1.7421481125937331802011618165616303524509e0",
                "1.7585430845442575152684935539758089002963e0",
                "1.7748681564318784956061490566921727912660e0",
                "1.7911291315965459610686330440903321751556e0",
                "1.8073313760931280409586026438592466449679e0",
                "1.8234798492034762539646117400089464773290e0",
                "1.8395791317428870218345881943338749514567e0",
                "1.8556334523673345526166897719413967101798e0",
                "1.8716467120618823237644174751423995110128e0",
                "1.8876225069682945898886936708259724962392e0",
                "1.9035641496905682340680733588761147147868e0",
                "1.9194746892004670383431107918909461220022e0",
                "1.9353569294508051311689777343318724010724e0",
                "1.9512134467918851335448489480686244658320e0",
                "1.9670466062758829493326790096637512404354e0",
                "1.9828585769248542615359494325140271799278e0",
                "1.9986513460302164872173027716369159545271e0",
                "2.0144267325448584238909011293983121179155e0",
                "2.0301863996232939867959703099223697675831e0",
                "2.0459318663603709089309321696194393434395e0",
                "2.0616645187748509819062556733511595434269e0",
                "2.0773856200805906083369891212413819482388e0",
                "2.0930963202849770478268394579668963253300e0",
                "2.1087976651516359980805969305285812986327e0",
                "2.1244906045621494094734818664624901772183e0",
                "2.1401760003095471347823986602110262158279e0",
                "2.1558546333546088177162561693661611282916e0",
                "2.1715272105744873762497309801286015228575e0",
                "2.1871943710318032626817688689479016459315e0",
                "2.2028566917911261066363034484088938019276e0",
                "2.2185146933086294755285755552902343376334e0",
                "2.2341688444196522263394137126844077832849e0",
                "2.2498195669479074387728994011357672486117e0",
                "2.2654672399591321296472383984179423575337e0",
                "2.2811122036810560438246713189646394398645e0",
                "2.2967547631106768230091545244770957087671e0",
                "2.3123951913289552175847633261226135657381e0",
                "2.3280337325421832200953315885206438955128e0",
                "2.3436706048684272529869134321802223419444e0",
                "2.3593060028866064153600026381190780593620e0",
                "2.3749400999649319671256919179776434219788e0",
                "2.3905730503846092443422968986620517612949e0",
                "2.4062049912738882350112811207626643086114e0",
                "2.4218360443667457273503314807770207281932e0",
                "2.4374663175996921865529518836230801824952e0",
                "2.4530959065594223861726662764187758497647e0",
                "2.4687248957932724200832874435368901902394e0",
                "2.4843533599937091021953496984949458148401e0",
                "2.4999813650673628527516733540811642704985e0",
                "2.5156089690984237248231582013720688709792e0",
                "2.5312362232155537807798246582846880080829e0",
                "2.5468631723708288845675539546798365321259e0",
                "2.5624898560386101765485470379555276866201e0",
                "2.5781163088416608302839339798526090090901e0",
                "2.5937425611112676866864588413908323976071e0",
                "2.6093686393876003062568605999237706063207e0",
                "2.6249945668660419283730977336705628811530e0",
                "2.6406203637947576168150949197438159601025e0",
                "2.6562460478283241468533841794526324676966e0",
                "2.6718716343418334214865601728124053949453e0",
                "2.6874971367094957110965234610953002590402e0",
                "2.7031225665514099803664696605265299211129e0",
                "2.7187479339518350789565132665263777146456e0",
                "2.7343732476519866207787614336355595995297e0",
                "2.7499985152200988853898713433649359974778e0",
                "2.7656237432012279188556540373950988687054e0",
                "2.7812489372490300321296056992200587764082e0",
                "2.7968741022415279161196415632627298306727e0",
                "2.8124992423826734330851759330330690306188e0",
                "2.8281243612913306297436313770977604696881e0",
                "2.8437494620791334915909305958039208080665e0",
                "2.8593745474185192893652318039509900539606e0",
                "2.8749996196020989591640194597828715553977e0",
                "2.8906246805943997480700881859252385889513e0",
                "2.9062497320769013311774609219663399157412e0",
                "2.9218747754871837943169987775487529822837e0",
                "2.9374998120529133594360913343320723534641e0",
                "2.9531248428213086370881004269208828128523e0",
                "2.9687498686846557049207836640457740178450e0",
                "2.9843748904023736660712897598312839537041e0",
                "2.9999999086200728217058575992148616865738e0",
                "3.0156249238859945324145602950773711254976e0",
                "3.0312499366651746273497021256189933432535e0",
                "3.0468749473516302784964667740479056180815e0",
                "3.0624999562788330660233970835148747848597e0",
                "3.0781249637286980380239381126415377242560e0",
                "3.0937499699392894736410400787620545626800e0",
                "3.1093749751114183905217153466178432371443e0",
                "3.1249999794142842298175412260726694636148e0",
                "3.1406249829902932722876157185714669185032e0",
                "3.1562499859591688866057544311164352541313e0",
                "3.1718749884214534139411400315725356152389e0",
                "3.1874999904614881063487795888962769480421e0",
                "3.2031249921499458402704025990221441531641e0",
                "3.2187499935459811229796762889946372908599e0",
                "3.2343749946990530223118963631371055187809e0",
                "3.2499999956504689206004856465720990628646e0",
                "3.2656249964346902816807254171842984410835e0",
                "3.2812499970804357999636869057476810813967e0",
                "3.2968749976116122618510860504561816060575e0",
                "3.3124999980480990937619253236039281649839e0",
                "3.3281249984064088107895019643331378937352e0",
                "3.3437499987002423387510096186461665921376e0",
                "3.3593749989409553925372227042584293359066e0",
                "3.3749999991379496957977985447935502569699e0",
                "3.3906249992990007689720649641898700087759e0",
                "3.4062499994305322488316571167179881941953e0",
                "3.4218749995378451931159358703318687539984e0",
                "3.4374999996253095336694347572943883996980e0",
                "3.4531249996965237403744318719820955568374e0",
                "3.4687499997544478197066963601760240146595e0",
                "3.4843749998015139730017435869777342452300e0",
                "3.4999999998397185606286503388346433424768e0",
                "3.5156249998706984420295462445022531693143e0",
                "3.5312499998957942731353539491609236676765e0",
                "3.5468749999161029291940004195997284465389e0",
                "3.5624999999325208715068848429508783688774e0",
                "3.5781249999457799814706926071805859523555e0",
                "3.5937499999564771365156209684414140770443e0",
                "3.6093749999650985930326072576180156720680e0",
                "3.6249999999720400652130345818392021739543e0",
                "3.6406249999776232407760471090072379350281e0",
                "3.6562499999821093504721825988326718769396e0",
                "3.6718749999857103043139674818928405332370e0",
                "3.6874999999885978205353539076801732508935e0",
                "3.7031249999909109006390232574729445826147e0",
                "3.7187499999927619432776591411845383153807e0",
                "3.7343749999942417392047009582495934368644e0",
                "3.7499999999954235474916417198622770787476e0",
                "3.7656249999963664182659624452280193995221e0",
                "3.7812499999971178982153879751746277293127e0",
                "3.7968749999977162310527293903932182987990e0",
                "3.8124999999981921452191178849943335617510e0",
                "3.8281249999985703046316753149009344914356e0",
                "3.8437499999988704846758071256210665527403e0",
                "3.8593749999991085244176789812609614440583e0",
                "3.8749999999992970967637710550572449243099e0",
                "3.8906249999994463306832653188882665836415e0",
                "3.9062499999995643133531929532493117828196e0",
                "3.9218749999996574949507273925372356482936e0",
                "3.9374999999997310146062973489358334367962e0",
                "3.9531249999997889625829827125313586465608e0",
                "3.9687499999998345909273062627645475818530e0",
                "3.9843749999998704825325250000057753030350e0",
                "3.9999999999998986866756071657621461490187e0",
                "4.0156249999999208275570473886247932763102e0",
                "4.0312499999999381911256511018907632797396e0",
                "4.0468749999999517944566087484273531480157e0",
                "4.0624999999999624411279554335956293111454e0",
                "4.0781249999999707653728445504078505935781e0",
                "4.0937499999999772672442066898190749550263e0",
                "4.1093749999999823405907548574351135153780e0",
                "4.1249999999999862952896452255937362394772e0",
                "4.1406249999999893748956403466257088736296e0",
                "4.1562499999999917706364736807927575541851e0",
                "4.1718749999999936324987813254236473354701e0",
                "4.1874999999999950779998983459727974867080e0",
                "4.2031249999999961991210581899829746750168e0",
                "4.2187499999999970677814344608540865134564e0",
                "4.2343749999999977401554409425509591345308e0",
                "4.2499999999999982600740438104009908411532e0",
                "4.2656249999999986617015333888163942088311e0",
                "4.2812499999999989716398218702053019425738e0",
                "4.2968749999999992105809165919733120488094e0",
                "4.3124999999999993946031842608439382166156e0",
                "4.3281249999999995361870963437657513031907e0",
                "4.3437499999999996450103053909644870604771e0",
                "4.3593749999999997285693234812703724882309e0",
                "4.3749999999999997926650971077342268492368e0",
                "4.3906249999999998417818686330492930319910e0",
                "4.4062499999999998793824595363341712958694e0",
                "4.4218749999999999081381665857471104765391e0",
                "4.4374999999999999301075585762842738824432e0",
                "4.4531249999999999468753828775520874893453e0",
                "4.4687499999999999596603661085718075089119e0",
                "4.4843749999999999693987852585714893278279e0",
                "4.4999999999999999768091860176051666863128e0",
                "4.5156249999999999824424478733820441991154e0",
                "4.5312499999999999867204724272603030522758e0",
                "4.5468749999999999899660483542058320029163e0",
                "4.5624999999999999924258807549007520473533e0",
                "4.5781249999999999942883305791572890300689e0",
                "4.5937499999999999956970647184607224970405e0",
                "4.6093749999999999967615482968733332971918e0",
                "4.6249999999999999975651011261709056075654e0",
                "4.6406249999999999981710772567237019409316e0",
                "4.6562499999999999986275998619415724310439e0",
                "4.6718749999999999989711853510876471098736e0",
                "4.6874999999999999992295143543034305594450e0",
                "4.7031249999999999994235481680994323439432e0",
                "4.7187499999999999995691435627236010731875e0",
                "4.7343749999999999996782835478124892418051e0",
                "4.7499999999999999997600144408120592070163e0",
                "4.7656249999999999998211585703353675323353e0",
                "4.7812499999999999998668557633039505510191e0",
                "4.7968749999999999999009743144570139039189e0",
                "4.8124999999999999999264225691206222950493e0",
                "4.8281249999999999999453849057656973292819e0",
                "4.8437499999999999999595002734371787181619e0",
                "4.8593749999999999999699971258820635467948e0",
                "4.8749999999999999999777952942333824491778e0",
                "4.8906249999999999999835828181634308050041e0",
                "4.9062499999999999999878738301943836363460e0",
                "4.9218749999999999999910521197769206834119e0",
                "4.9374999999999999999934038854992744247691e0",
                "4.9531249999999999999951423329455989135930e0",
                "4.9687499999999999999964261290508136941197e0",
                "4.9843749999999999999973732328445784472792e0",
                "4.9999999999999999999980712501520360822169e0",
                "5.0156249999999999999985851777682154757615e0",
                "5.0312499999999999999989631891923365639488e0",
                "5.0468749999999999999992409526797064488556e0",
                "5.0624999999999999999994448505566211878959e0",
                "5.0781249999999999999995943768688403756721e0",
                "5.0937499999999999999997039212147112521490e0",
                "5.1093749999999999999997840945201328618188e0",
                "5.1249999999999999999998427133498970252257e0",
                "5.1406249999999999999998855299406309940202e0",
                "5.1562499999999999999999167730795562401358e0",
                "5.1718749999999999999999395484224687428648e0",
                "5.1874999999999999999999561344708799174095e0",
                "5.2031249999999999999999682011766417773123e0",
                "5.2187499999999999999999769712324588910760e0",
                "5.2343749999999999999999833389513383877451e0",
                "5.2499999999999999999999879577958866312408e0",
                "5.2656249999999999999999913047580117091516e0",
                "5.2812499999999999999999937276624538777151e0",
                "5.2968749999999999999999954798873993240538e0",
                "5.3124999999999999999999967458228543469694e0",
                "5.3281249999999999999999976595182714330316e0",
                "5.3437499999999999999999983183273197119893e0",
                "5.3593749999999999999999987928816443980385e0",
                "5.3749999999999999999999991343737223043541e0",
                "5.3906249999999999999999993798693114434736e0",
                "5.4062499999999999999999995561785871991263e0",
                "5.4218749999999999999999996826740888119729e0",
                "5.4374999999999999999999997733398888211622e0",
                "5.4531249999999999999999998382601793171151e0",
                "5.4687499999999999999999998846995145573891e0",
                "5.4843749999999999999999999178859158673493e0",
                "5.4999999999999999999999999415779852535300e0",
                "5.5156249999999999999999999584751773851426e0",
                "5.5312499999999999999999999705143001144803e0",
                "5.5468749999999999999999999790835722647015e0",
                "5.5624999999999999999999999851770028110362e0",
                "5.5781249999999999999999999895056149333966e0",
                "5.5937499999999999999999999925774959786040e0",
                "5.6093749999999999999999999947553515425807e0",
                "5.6249999999999999999999999962978429380657e0",
                "5.6406249999999999999999999973892467398373e0",
                "5.6562499999999999999999999981607135548357e0",
                "5.6718749999999999999999999987054897852610e0",
                "5.6874999999999999999999999990898055530442e0",
                "5.7031249999999999999999999993606546837990e0",
                "5.7187499999999999999999999995513481956701e0",
                "5.7343749999999999999999999996854744056765e0",
                "5.7499999999999999999999999997797199205238e0",
                "5.7656249999999999999999999998458771132970e0",
                "5.7812499999999999999999999998922712204928e0",
                "5.7968749999999999999999999999247738117468e0",
                "5.8124999999999999999999999999475217792172e0",
                "5.8281249999999999999999999999634268898359e0",
                "5.8437499999999999999999999999745365380625e0",
                "5.8593749999999999999999999999822888899033e0",
                "5.8749999999999999999999999999876931498464e0",
                "5.8906249999999999999999999999914567944611e0",
                "5.9062499999999999999999999999940752827898e0",
                "5.9218749999999999999999999999958952449875e0",
                "5.9374999999999999999999999999971589444952e0",
                "5.9531249999999999999999999999980355314890e0",
                "5.9687499999999999999999999999986429891578e0",
                "5.9843749999999999999999999999990635287014e0",
                "5.9999999999999999999999999999993543776608e0",
                "6.0156249999999999999999999999995553323189e0",
                "6.0312499999999999999999999999996940393771e0",
                "6.0468749999999999999999999999997896858579e0",
                "6.0624999999999999999999999999998555743264e0",
                "6.0781249999999999999999999999999009183281e0",
                "6.0937499999999999999999999999999320928874e0",
                "6.1093749999999999999999999999999535045739e0",
                "6.1249999999999999999999999999999681962564e0",
                "6.1406249999999999999999999999999782670184e0",
                "6.1562499999999999999999999999999851634319e0",
                "6.1718749999999999999999999999999898813941e0",
                "6.1874999999999999999999999999999931058455e0",
                "6.2031249999999999999999999999999953073901e0",
                "6.2187499999999999999999999999999968090424e0",
                "6.2343749999999999999999999999999978322922e0",
                "6.2499999999999999999999999999999985288613e0",
                "6.2656249999999999999999999999999990025764e0",
                "6.2812499999999999999999999999999993244167e0",
                "6.2968749999999999999999999999999995428578e0",
                "6.3124999999999999999999999999999996909726e0",
                "6.3281249999999999999999999999999997913032e0",
                "6.3437499999999999999999999999999998591983e0",
                "6.3593749999999999999999999999999999050985e0",
                "6.3749999999999999999999999999999999360984e0",
                "6.3906249999999999999999999999999999570143e0",
                "6.4062499999999999999999999999999999711126e0",
                "6.4218749999999999999999999999999999806060e0",
                "6.4374999999999999999999999999999999869923e0",
                "6.4531249999999999999999999999999999912843e0",
                "6.4687499999999999999999999999999999941658e0",
                "6.4843749999999999999999999999999999960985e0",
                "6.4999999999999999999999999999999999973935e0",
                "6.5156249999999999999999999999999999982604e0",
                "6.5312499999999999999999999999999999988401e0",
                "6.5468749999999999999999999999999999992274e0",
                "6.5624999999999999999999999999999999994858e0",
                "6.5781249999999999999999999999999999996582e0",
                "6.5937499999999999999999999999999999997730e0",
                "6.6093749999999999999999999999999999998494e0",
                "6.6249999999999999999999999999999999999002e0",
                "6.6406249999999999999999999999999999999339e0",
                "6.6562499999999999999999999999999999999563e0",
                "6.6718749999999999999999999999999999999711e0",
                "6.6874999999999999999999999999999999999809e0",
                "6.7031249999999999999999999999999999999874e0",
                "6.7187499999999999999999999999999999999917e0",
                "6.7343749999999999999999999999999999999945e0",
                "6.7499999999999999999999999999999999999964e0",
                "6.7656249999999999999999999999999999999976e0",
                "6.7812499999999999999999999999999999999985e0",
                "6.7968749999999999999999999999999999999990e0",
                "6.8124999999999999999999999999999999999993e0",
                "6.8281249999999999999999999999999999999996e0",
                "6.8437499999999999999999999999999999999997e0",
                "6.8593749999999999999999999999999999999998e0",
                "6.8749999999999999999999999999999999999999e0",
                "6.8906249999999999999999999999999999999999e0",
                "6.9062499999999999999999999999999999999999e0",
                "6.9218750000000000000000000000000000000000e0",
                "6.9375000000000000000000000000000000000000e0",
                "6.9531250000000000000000000000000000000000e0",
                "6.9687500000000000000000000000000000000000e0",
                "6.9843750000000000000000000000000000000000e0",
                "7.0000000000000000000000000000000000000000e0",
                "7.0156250000000000000000000000000000000000e0",
                "7.0312500000000000000000000000000000000000e0",
                "7.0468750000000000000000000000000000000000e0",
                "7.0625000000000000000000000000000000000000e0",
                "7.0781250000000000000000000000000000000000e0",
                "7.0937500000000000000000000000000000000000e0",
                "7.1093750000000000000000000000000000000000e0",
                "7.1250000000000000000000000000000000000000e0",
                "7.1406250000000000000000000000000000000000e0",
                "7.1562500000000000000000000000000000000000e0",
                "7.1718750000000000000000000000000000000000e0",
                "7.1875000000000000000000000000000000000000e0",
                "7.2031250000000000000000000000000000000000e0",
                "7.2187500000000000000000000000000000000000e0",
                "7.2343750000000000000000000000000000000000e0",
                "7.2500000000000000000000000000000000000000e0",
                "7.2656250000000000000000000000000000000000e0",
                "7.2812500000000000000000000000000000000000e0",
                "7.2968750000000000000000000000000000000000e0",
                "7.3125000000000000000000000000000000000000e0",
                "7.3281250000000000000000000000000000000000e0",
                "7.3437500000000000000000000000000000000000e0",
                "7.3593750000000000000000000000000000000000e0",
                "7.3750000000000000000000000000000000000000e0",
                "7.3906250000000000000000000000000000000000e0",
                "7.4062500000000000000000000000000000000000e0",
                "7.4218750000000000000000000000000000000000e0",
                "7.4375000000000000000000000000000000000000e0",
                "7.4531250000000000000000000000000000000000e0",
                "7.4687500000000000000000000000000000000000e0",
                "7.4843750000000000000000000000000000000000e0",
                "7.5000000000000000000000000000000000000000e0",
                "7.5156250000000000000000000000000000000000e0",
                "7.5312500000000000000000000000000000000000e0",
                "7.5468750000000000000000000000000000000000e0",
                "7.5625000000000000000000000000000000000000e0",
                "7.5781250000000000000000000000000000000000e0",
                "7.5937500000000000000000000000000000000000e0",
                "7.6093750000000000000000000000000000000000e0",
                "7.6250000000000000000000000000000000000000e0",
                "7.6406250000000000000000000000000000000000e0",
                "7.6562500000000000000000000000000000000000e0",
                "7.6718750000000000000000000000000000000000e0",
                "7.6875000000000000000000000000000000000000e0",
                "7.7031250000000000000000000000000000000000e0",
                "7.7187500000000000000000000000000000000000e0",
                "7.7343750000000000000000000000000000000000e0",
                "7.7500000000000000000000000000000000000000e0",
                "7.7656250000000000000000000000000000000000e0",
                "7.7812500000000000000000000000000000000000e0",
                "7.7968750000000000000000000000000000000000e0",
                "7.8125000000000000000000000000000000000000e0",
                "7.8281250000000000000000000000000000000000e0",
                "7.8437500000000000000000000000000000000000e0",
                "7.8593750000000000000000000000000000000000e0",
                "7.8750000000000000000000000000000000000000e0",
                "7.8906250000000000000000000000000000000000e0",
                "7.9062500000000000000000000000000000000000e0",
                "7.9218750000000000000000000000000000000000e0",
                "7.9375000000000000000000000000000000000000e0",
                "7.9531250000000000000000000000000000000000e0",
                "7.9687500000000000000000000000000000000000e0",
                "7.9843750000000000000000000000000000000000e0",
                "8.0000000000000000000000000000000000000000e0",
            ];

            for ((ddouble mu, int i) = (1, 0); mu <= 8; mu += 1d / 64, i++) {
                FoledNormalDistribution dist = new(mu, sigma: 1d);

                ddouble expected = expecteds[i];
                ddouble actual = dist.Mode;

                Assert.IsTrue(ddouble.Abs(actual - expected) < 1e-30, $"{dist}\n{expected}\n{actual}");
            }
        }

        [TestMethod()]
        public void MedianTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                Assert.IsTrue(ddouble.Abs(dist.CDF(dist.Median) - 0.5) < 1e-20, $"{dist}\n{dist.Median}");
            }
        }

        [TestMethod()]
        public void VarianceTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                if (!ddouble.IsFinite(dist.Variance)) {
                    continue;
                }

                ddouble actual = dist.Variance;
                ddouble expected = IntegrationStatistics.Variance(dist, eps: 1e-28, discontinue_eval_points: 65536);
                Assert.IsTrue(ddouble.Abs(actual - expected) < 1e-20, $"{dist}\n{expected}\n{actual}");
            }
        }

        [TestMethod()]
        public void SkewnessTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                if (!ddouble.IsFinite(dist.Skewness)) {
                    continue;
                }

                ddouble actual = dist.Skewness;
                ddouble expected = IntegrationStatistics.Skewness(dist, eps: 1e-28, discontinue_eval_points: 65536);
                Assert.IsTrue(ddouble.Abs(actual - expected) < 1e-20, $"{dist}\n{expected}\n{actual}");
            }
        }

        [TestMethod()]
        public void KurtosisTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                if (!ddouble.IsFinite(dist.Kurtosis)) {
                    continue;
                }

                ddouble actual = dist.Kurtosis;
                ddouble expected = IntegrationStatistics.Kurtosis(dist, eps: 1e-28, discontinue_eval_points: 65536);
                Assert.IsTrue(ddouble.Abs(actual - expected) < 1e-20, $"{dist}\n{expected}\n{actual}");
            }
        }

        [TestMethod()]
        public void EntropyTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                ddouble actual = dist.Entropy;
                ddouble expected = IntegrationStatistics.Entropy(dist, eps: 1e-28, discontinue_eval_points: 65536);
                Assert.IsTrue(ddouble.Abs(actual - expected) < 1e-20, $"{dist}\n{expected}\n{actual}");
            }
        }

        [TestMethod()]
        public void PDFTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);
                for (ddouble x = -4; x <= 4; x += 0.125) {
                    ddouble pdf = dist.PDF(x);

                    Console.WriteLine($"pdf({x})={pdf}");
                }
            }
        }

        [TestMethod()]
        public void CDFLowerTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);
                for (ddouble x = -4; x <= 4; x += 0.125) {
                    ddouble cdf = dist.CDF(x, Interval.Lower);

                    Console.WriteLine($"cdf({x})={cdf}");
                }
            }
        }

        [TestMethod()]
        public void CDFUpperTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);
                for (ddouble x = -4; x <= 4; x += 0.125) {
                    ddouble cdf = dist.CDF(x, Interval.Lower);
                    ddouble ccdf = dist.CDF(x, Interval.Upper);

                    Console.WriteLine($"ccdf({x})={ccdf}");

                    Assert.IsTrue(ddouble.Abs(cdf + ccdf - 1) < 1e-28);
                }
            }
        }

        [TestMethod()]
        public void QuantileLowerTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);
                for (int i = 0; i <= 1000; i++) {
                    ddouble p = (ddouble)i / 1000;
                    ddouble x = dist.Quantile(p, Interval.Lower);
                    ddouble cdf = dist.CDF(x, Interval.Lower);

                    Console.WriteLine($"quantile({p})={x}, cdf({x})={cdf}");

                    if (ddouble.IsFinite(x)) {
                        Assert.IsTrue(ddouble.Abs(p - cdf) < 1e-28);
                    }
                }

                for (ddouble p = (ddouble)1 / 1000; p >= "1e-280"; p /= 10) {
                    ddouble x = dist.Quantile(p, Interval.Lower);
                    ddouble cdf = dist.CDF(x, Interval.Lower);

                    Console.WriteLine($"quantile({p})={x}, cdf({x})={cdf}");

                    if (ddouble.IsFinite(x)) {
                        Assert.IsTrue(ddouble.Abs(p - cdf) < 1e-28);
                    }
                }
            }
        }

        [TestMethod()]
        public void QuantileUpperTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);
                for (int i = 0; i <= 1000; i++) {
                    ddouble p = (ddouble)i / 1000;
                    ddouble x = dist.Quantile(p, Interval.Upper);
                    ddouble ccdf = dist.CDF(x, Interval.Upper);

                    Console.WriteLine($"cquantile({p})={x}, ccdf({x})={ccdf}");

                    if (ddouble.IsFinite(x)) {
                        Assert.IsTrue(ddouble.Abs(p - ccdf) < 1e-28);
                    }
                }

                for (ddouble p = (ddouble)1 / 1000; p >= "1e-280"; p /= 10) {
                    ddouble x = dist.Quantile(p, Interval.Upper);
                    ddouble ccdf = dist.CDF(x, Interval.Upper);

                    Console.WriteLine($"quantile({p})={x}, ccdf({x})={ccdf}");

                    if (ddouble.IsFinite(x)) {
                        Assert.IsTrue(ddouble.Abs(p - ccdf) < 1e-28);
                    }
                }
            }
        }

        [TestMethod()]
        public void IrregularValueTest() {
            foreach (FoledNormalDistribution dist in Dists) {
                Console.WriteLine(dist);

                Assert.IsTrue(ddouble.IsFinite(dist.PDF(ddouble.NegativeInfinity)) && dist.PDF(ddouble.NegativeInfinity) >= 0d, "pdf(-inf)");
                Assert.IsTrue(ddouble.IsFinite(dist.PDF(ddouble.MinValue)) && dist.PDF(ddouble.MinValue) >= 0d, "pdf(-lval)");
                Assert.IsTrue(ddouble.IsFinite(dist.PDF(ddouble.MinValue / 2)) && dist.PDF(ddouble.MinValue / 2) >= 0d, "pdf(-lval / 2)");

                Assert.IsTrue(ddouble.IsFinite(dist.PDF(ddouble.PositiveInfinity)) && dist.PDF(ddouble.PositiveInfinity) >= 0d, "pdf(+inf)");
                Assert.IsTrue(ddouble.IsFinite(dist.PDF(ddouble.MaxValue)) && dist.PDF(ddouble.MaxValue) >= 0d, "pdf(+lval)");
                Assert.IsTrue(ddouble.IsFinite(dist.PDF(ddouble.MaxValue / 2)) && dist.PDF(ddouble.MaxValue / 2) >= 0d, "pdf(+lval / 2)");

                Assert.IsTrue(ddouble.IsNaN(dist.PDF(ddouble.NaN)), "pdf(NaN)");

                Assert.IsTrue(dist.CDF(ddouble.NegativeInfinity, Interval.Lower) == 0d, "cdf(-inf)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MinValue, Interval.Lower)) && dist.CDF(ddouble.MinValue, Interval.Lower) >= 0d, "cdf(-lval)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MinValue / 2, Interval.Lower)) && dist.CDF(ddouble.MinValue / 2, Interval.Lower) >= 0d, "cdf(-lval / 2)");

                Assert.IsTrue(dist.CDF(ddouble.PositiveInfinity, Interval.Lower) == 1d, "cdf(+inf)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MaxValue, Interval.Lower)) && dist.CDF(ddouble.MaxValue, Interval.Lower) <= 1d, "cdf(+lval)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MaxValue / 2, Interval.Lower)) && dist.CDF(ddouble.MaxValue / 2, Interval.Lower) <= 1d, "cdf(+lval / 2)");

                Assert.IsTrue(ddouble.IsNaN(dist.CDF(ddouble.NaN, Interval.Lower)), "cdf(NaN)");

                Assert.IsTrue(dist.CDF(ddouble.NegativeInfinity, Interval.Upper) == 1d, "ccdf(-inf)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MinValue, Interval.Upper)) && dist.CDF(ddouble.MinValue, Interval.Upper) <= 1d, "ccdf(-lval)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MinValue / 2, Interval.Upper)) && dist.CDF(ddouble.MinValue / 2, Interval.Upper) <= 1d, "ccdf(-lval / 2)");

                Assert.IsTrue(dist.CDF(ddouble.PositiveInfinity, Interval.Upper) == 0d, "cdf(+inf)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MaxValue, Interval.Upper)) && dist.CDF(ddouble.MaxValue, Interval.Upper) >= 0d, "ccdf(+lval)");
                Assert.IsTrue(ddouble.IsFinite(dist.CDF(ddouble.MaxValue / 2, Interval.Upper)) && dist.CDF(ddouble.MaxValue / 2, Interval.Upper) >= 0d, "ccdf(+lval / 2)");

                Assert.IsTrue(ddouble.IsNaN(dist.CDF(ddouble.NaN, Interval.Upper)), "ccdf(NaN)");

                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(0d, Interval.Lower)) || ddouble.IsNegativeInfinity(dist.Quantile(0d, Interval.Lower)), "quantile(0)");
                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(1d, Interval.Lower)) || ddouble.IsPositiveInfinity(dist.Quantile(1d, Interval.Lower)), "quantile(1)");

                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(0d, Interval.Upper)) || ddouble.IsPositiveInfinity(dist.Quantile(0d, Interval.Upper)), "cquantile(0)");
                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(1d, Interval.Upper)) || ddouble.IsNegativeInfinity(dist.Quantile(1d, Interval.Upper)), "cquantile(1)");

                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(ddouble.Epsilon, Interval.Lower)) || ddouble.IsNegativeInfinity(dist.Quantile(ddouble.Epsilon, Interval.Lower)), "quantile(0+eps)");
                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(ddouble.One - ddouble.Epsilon, Interval.Lower)) || ddouble.IsPositiveInfinity(dist.Quantile(ddouble.One - ddouble.Epsilon, Interval.Lower)), "quantile(1-eps)");

                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(ddouble.Epsilon, Interval.Upper)) || ddouble.IsPositiveInfinity(dist.Quantile(ddouble.Epsilon, Interval.Upper)), "cquantile(0+eps)");
                Assert.IsTrue(ddouble.IsFinite(dist.Quantile(ddouble.One - ddouble.Epsilon, Interval.Upper)) || ddouble.IsNegativeInfinity(dist.Quantile(ddouble.One - ddouble.Epsilon, Interval.Upper)), "cquantile(1-eps)");
            }
        }

        [TestMethod()]
        public void PDFExpectedTest() {
            ddouble[] expected_dist1 = [
                7.978845608028654057e-01,
                7.916753738894990455e-01,
                7.733362336056985864e-01,
                7.437101877395378979e-01,
                7.041306535285990487e-01,
                6.563219371007501524e-01,
                6.022748643096088594e-01,
                5.441099967570870444e-01,
                4.839414490382867307e-01,
                4.237532915513989584e-01,
                3.652981707780438292e-01,
                3.100245309165864382e-01,
                2.590351913317834875e-01,
                2.130765362611701519e-01,
                1.725546376530230630e-01,
                1.375725516533838066e-01,
                1.079819330263761257e-01,
                8.344197051267722431e-02,
                6.347930367133483576e-02,
                4.754380165982761280e-02,
                3.505660098713708067e-02,
                2.544836319366286514e-02,
                1.818712500318210579e-02,
                1.279624062144711465e-02,
                8.863696823876015055e-03,
                6.044516070397513118e-03,
                4.058096114599536210e-03,
                2.682237746980755538e-03,
                1.745365390091520308e-03,
                1.118123044464329734e-03,
                7.051913647348909218e-04,
                4.378632755292241976e-04,
            ];
            ddouble[] expected_dist2 = [
                2.515888184619954893e-01,
                2.513947653832285245e-01,
                2.508134944056172322e-01,
                2.498476636190572753e-01,
                2.485016809554131678e-01,
                2.467816711031540766e-01,
                2.446954296677650575e-01,
                2.422523650503534964e-01,
                2.394634286412616608e-01,
                2.363410340421759626e-01,
                2.328989661377154630e-01,
                2.291522809344683775e-01,
                2.251171971707475183e-01,
                2.208109807729686513e-01,
                2.162518232937168661e-01,
                2.114587155116539607e-01,
                2.064513174040455146e-01,
                2.012498257186705608e-01,
                1.958748403732461230e-01,
                1.903472308975029670e-01,
                1.846880041061194910e-01,
                1.789181741504980716e-01,
                1.730586360446583483e-01,
                1.671300436962978309e-01,
                1.611526933994486266e-01,
                1.551464136613785738e-01,
                1.491304621447800682e-01,
                1.431234304082845132e-01,
                1.371431570253981158e-01,
                1.312066495555748169e-01,
                1.253300157328310904e-01,
                1.195284041285434168e-01,
            ];
            ddouble[] expected_dist3 = [
                2.129653370149015013e-01,
                2.128626480254058873e-01,
                2.125547516332525477e-01,
                2.120421607411227816e-01,
                2.113257340582007371e-01,
                2.104066817651176480e-01,
                2.092865731641012916e-01,
                2.079673460416047170e-01,
                2.064513174040455146e-01,
                2.047411951887198045e-01,
                2.028400905028617807e-01,
                2.007515299053539426e-01,
                1.984794672186662723e-01,
                1.960282943438437231e-01,
                1.934028505491212913e-01,
                1.906084297130679062e-01,
                1.876507850258087862e-01,
                1.845361306863261552e-01,
                1.812711401792925781e-01,
                1.778629407703158083e-01,
                1.743191039226105465e-01,
                1.706476314095144442e-01,
                1.668569369743470865e-01,
                1.629558234701672659e-01,
                1.589534554952473089e-01,
                1.548593276237615612e-01,
                1.506832284135046496e-01,
                1.464352004516918104e-01,
                1.421254967744308428e-01,
                1.377645340638015137e-01,
                1.333628430873051718e-01,
                1.289310168966198711e-01,
            ];
            ddouble[] expected_dist4 = [
                5.399096651318806284e-02,
                5.430714815085298935e-02,
                5.525363054151526121e-02,
                5.682420880795143597e-02,
                5.900848533108947469e-02,
                6.179179085400891142e-02,
                6.515508448024943944e-02,
                6.907484249855072589e-02,
                7.352294807973014379e-02,
                7.846659549556474211e-02,
                8.386822352756231891e-02,
                8.968549310919302076e-02,
                9.587132394530648027e-02,
                1.023740038686668519e-01,
                1.091373830432115222e-01,
                1.161011628501994741e-01,
                1.232012864655406825e-01,
                1.303704348465144769e-01,
                1.375386282068711274e-01,
                1.446339292012588928e-01,
                1.515832401060520918e-01,
                1.583131824244997932e-01,
                1.647510437119327209e-01,
                1.708257731594726714e-01,
                1.764690047296726405e-01,
                1.816160845256961365e-01,
                1.862070776960005614e-01,
                1.901877296013702867e-01,
                1.935103562426083723e-01,
                1.961346400745851426e-01,
                1.980283092912570597e-01,
                1.991676813990406747e-01,
            ];

            foreach ((FoledNormalDistribution dist, ddouble[] expecteds) in new[]{
                (dist1, expected_dist1), (dist2, expected_dist2),
                (dist3, expected_dist3), (dist4, expected_dist4)
            }) {
                for ((ddouble x, int i) = (0, 0); i < expecteds.Length; x += 0.125, i++) {
                    ddouble expected = expecteds[i];
                    ddouble actual = dist.PDF(x);

                    Console.WriteLine($"{dist} pdf({x})");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    Assert.IsTrue(ddouble.Abs(expected - actual) / expected < 1e-10, $"{dist} pdf({x})\n{expected}\n{actual}");
                }
            }
        }

        [TestMethod()]
        public void CDFExpectedTest() {
            ddouble[] expected_dist1 = [
                0.000000000000000000e+00,
                9.947644966022584079e-02,
                1.974126513658474025e-01,
                2.923395333454474887e-01,
                3.829249225480262364e-01,
                4.680289419025989162e-01,
                5.467452952462634741e-01,
                6.184260942949786344e-01,
                6.826894921370858516e-01,
                7.394109657263823188e-01,
                7.887004526662892978e-01,
                8.308685552973287258e-01,
                8.663855974622838296e-01,
                8.958374411695608774e-01,
                9.198816862723657728e-01,
                9.392072764694772147e-01,
                9.544997361036415828e-01,
                9.664133871031024281e-01,
                9.755510546899106572e-01,
                9.824510498085232690e-01,
                9.875806693484476817e-01,
                9.913351032739747826e-01,
                9.940404735298908889e-01,
                9.959597250201079888e-01,
                9.973002039367397931e-01,
                9.982219494017832151e-01,
                9.988459499152184673e-01,
                9.992618430914499417e-01,
                9.995347418419289198e-01,
                9.997110385482375072e-01,
                9.998231654295983706e-01,
                9.998933753004977110e-01,
            ];
            ddouble[] expected_dist2 = [
                0.000000000000000000e+00,
                3.144051552800086746e-02,
                6.283255480638660906e-02,
                9.412786337152745375e-02,
                1.252786286631093482e-01,
                1.562376968214365114e-01,
                1.869587845476718968e-01,
                2.173966844609360738e-01,
                2.475074624530770873e-01,
                2.772486456239133812e-01,
                3.065793994757539664e-01,
                3.354606931548034243e-01,
                3.638554516472605194e-01,
                3.917286939680117985e-01,
                4.190476565181384672e-01,
                4.457819009323178427e-01,
                4.719034058867792591e-01,
                4.973866424909716422e-01,
                5.222086330396882303e-01,
                5.463489930552412055e-01,
                5.697899566996320608e-01,
                5.925163857828099623e-01,
                6.145157627334389971e-01,
                6.357781680316045847e-01,
                6.562962427272092114e-01,
                6.760651367822143598e-01,
                6.950824440783143210e-01,
                7.133481250231925586e-01,
                7.308644177674987752e-01,
                7.476357391105799000e-01,
                7.636685762254518117e-01,
                7.789713703723752936e-01,
            ];
            ddouble[] expected_dist3 = [
                0.000000000000000000e+00,
                2.661638818225053882e-02,
                5.320711122283761085e-02,
                7.974654667314107215e-02,
                1.062091577623438532e-01,
                1.325695369554393821e-01,
                1.588024503459042336e-01,
                1.848828831148712215e-01,
                2.107860862503065924e-01,
                2.364876246735250209e-01,
                2.619634268674542188e-01,
                2.871898360426685670e-01,
                3.121436628147149506e-01,
                3.368022393011473881e-01,
                3.611434744805224195e-01,
                3.851459105899417423e-01,
                4.087887802741321241e-01,
                4.320520641390277472e-01,
                4.549165483078048133e-01,
                4.773638815286149750e-01,
                4.993766313420455738e-01,
                5.209383387836130641e-01,
                5.420335710731607470e-01,
                5.626479717295032046e-01,
                5.827683075454217487e-01,
                6.023825118653240995e-01,
                6.214797236254931967e-01,
                6.400503216445607713e-01,
                6.580859536891958683e-01,
                6.755795598862879281e-01,
                6.925253901072838669e-01,
                7.089190150117845590e-01,
            ];
            ddouble[] expected_dist4 = [
                0.000000000000000000e+00,
                6.762047910763957503e-03,
                1.360305531681249569e-02,
                2.060146535943307988e-02,
                2.783468420877244220e-02,
                3.537855230368314174e-02,
                4.330680431948108478e-02,
                5.169051582178685322e-02,
                6.059753594308192604e-02,
                7.009190703033230108e-02,
                8.023327398832313939e-02,
                9.107628790723265588e-02,
                1.026700104318007956e-01,
                1.150573271180173052e-01,
                1.282743796468628350e-01,
                1.423500281424234792e-01,
                1.573053558998269708e-01,
                1.731532295031046331e-01,
                1.898979275534022904e-01,
                2.075348509982644085e-01,
                2.260503273344773856e-01,
                2.454215197500728696e-01,
                2.656164505944254017e-01,
                2.865941464566132968e-01,
                3.083049096469512307e-01,
                3.306907180866418550e-01,
                3.536857526013950093e-01,
                3.772170474830205400e-01,
                4.012052570318753730e-01,
                4.255655277294561056e-01,
                4.502084628201359351e-01,
                4.750411635047810943e-01,
            ];

            foreach ((FoledNormalDistribution dist, ddouble[] expecteds) in new[]{
                (dist1, expected_dist1), (dist2, expected_dist2),
                (dist3, expected_dist3), (dist4, expected_dist4)
            }) {
                for ((ddouble x, int i) = (0, 0); i < expecteds.Length; x += 0.125, i++) {
                    ddouble expected = expecteds[i];
                    ddouble actual = dist.CDF(x);

                    Console.WriteLine($"{dist} cdf({x})");
                    Console.WriteLine(expected);
                    Console.WriteLine(actual);

                    if (expected > 0) {
                        Assert.IsTrue(ddouble.Abs(expected - actual) / expected < 1e-10, $"{dist} cdf({x})\n{expected}\n{actual}");
                    }
                    else {
                        Assert.AreEqual(0, actual);
                    }
                }
            }
        }
    }
}